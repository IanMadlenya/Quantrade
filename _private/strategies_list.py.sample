from asyncio import gather, set_event_loop, new_event_loop
from threading import Thread

from django.conf import settings

from collector.arctic_utils import IndicatorBase, SignalBase


async def each_indie(indi, mc, filenames):
    indicator = IndicatorBase(name=indi[0], description=indi[1], per=indi[2], \
        mc=mc, filenames=filenames)
    await indicator.starter()


async def each_strategy(strategy, mc, filenames):
    signal = SignalBase(name=strategy[0], description=strategy[1],
        indicator=strategy[2], mean_rev=strategy[3], buy_threshold=strategy[4], \
            sell_threshold=strategy[5], mc=mc, filenames=filenames)
    await signal.starter()


def indicator_processor(filenames, mc=False):
    def start_loop(loop, filenames):
        set_event_loop(loop)
        loop.run_until_complete(gather(*[each_indie(indi=indi, mc=mc, filenames=filenames) \
            for indi in INDICATORS], return_exceptions=True
        ))

    INDICATORS = (
        ('SMA20', 'SMA(20).', 20),

    )

    cnt = len(filenames)
    batch_size = int(cnt/settings.CPUS)
    diff = cnt - (settings.CPUS * batch_size)

    for cpu in range(settings.CPUS):
        if (cpu+1) == settings.CPUS:
            t = Thread(target=start_loop, args=(new_event_loop(), filenames[cpu*batch_size:(cpu+1)*batch_size+diff]))
        else:
            t = Thread(target=start_loop, args=(new_event_loop(), filenames[cpu*batch_size:(cpu+1)*batch_size]))
        t.start()
        t.join()


def strategy_processor(filenames, mc=False):
    def start_loop(loop, filenames):
        set_event_loop(loop)
        loop.run_until_complete(gather(*[each_strategy(strategy=strategy, mc=mc, filenames=filenames) \
            for strategy in STRATEGIES], return_exceptions=True
        ))

    STRATEGIES = (
        #name, description, indicator, mean_rev, buy_threshold, sell_threshold:
        ('SM20M', 'Simple momentum.', 'SMA20', False, None, None),

    )

    cnt = len(filenames)
    batch_size = int(cnt/settings.CPUS)
    diff = cnt - (settings.CPUS * batch_size)

    for cpu in range(settings.CPUS):
        if (cpu+1) == settings.CPUS:
            t = Thread(target=start_loop, args=(new_event_loop(), filenames[cpu*batch_size:(cpu+1)*batch_size+diff]))
        else:
            t = Thread(target=start_loop, args=(new_event_loop(), filenames[cpu*batch_size:(cpu+1)*batch_size]))
        t.start()
        t.join()